{
  "name": "msgs",
  "version": "0.3.2",
  "main": "./msgs.js",
  "dependencies": {
    "when": "~1"
  },
  "readme": "msgs.js\n=======\n\nMessage oriented programming for JavaScript.  Inspired by Spring Integration.\n\n\nBuild Status\n------------\n\n<table>\n  <tr><td>Master</td><td><a href=\"http://travis-ci.org/cujojs/msgs\" target=\"_blank\"><img src=\"https://secure.travis-ci.org/cujojs/msgs.png?branch=master\" /></a></tr>\n  <tr><td>Development</td><td><a href=\"http://travis-ci.org/cujojs/msgs\" target=\"_blank\"><img src=\"https://secure.travis-ci.org/cujojs/msgs.png?branch=dev\" /></a></tr>\n</table>\n\n\nOverview\n--------\n\nmsgs.js applies the vocabulary and patterns defined in the '[Enterprise Integration Patterns](http://www.eaipatterns.com/)' book to JavaScript extending messaging oriented programming into the browser and/or server side JavaScript. Messaging patterns originally developed to integrate loosely coupled disparate systems, apply just as well to loosely coupled modules within a single application process.\n\nAt the most basic level, `messages` are sent to `channels` and then dispatched to `handlers`. There are a wide variety of handler types that can easily be extended to provide rich behavior. The foundation handler types include: transforms, filters, routers, splitters and aggregators. Adapters and gateways provide ways in to and out of the messaging system. Channels dispatch messages to one or many handlers using a load balancer or pub-sub respectively, or queue messages until a poller consumes them.\n\nAdapters are provided to aid integrating with popular external systems, protocols and APIs including: Node streams, Redis pub-sub, web sockets and web workers. Expect even more adapters in the future, or contribute your own.\n\nAll channels and handlers exist within the context of a message bus. The bus provides factories to create channels and handlers, in addition to a scope for referencing these components by name.\n\n```javascript\nvar bus = require('msgs').bus();\n\nbus.channel('lowercase');\nbus.transform(function (message) { return message.toUpperCase(); }, { input: 'lowercase', output: 'uppercase' });\nbus.channel('uppercase');\nbus.outboundAdapter(function (str) {\n  console.log(str);\n}, { input: 'uppercase' });\n\nbus.send('lowercase', 'hello world'); // 'HELLO WORLD'\n```\n\nThis example defines two channels, `lowercase` and `uppercase`, and a transform that listens for messages on the `lowercase` channel converts them to upper case and sends the transformed message to the `uppercase` channel.  Finally, an adapter listens for messages on the `uppercase` channel and logs it to the console.  So when we send 'hello world' to the `lowercase` channel, 'HELLO WORLD' is logged to the console.\n\nWhile converting a string to upper case is a bit contrived, it demonstrates the core concepts. A slightly more complex example starts to show the real power.\n\n```javascript\nvar bus, webSocketServer;\n\nrequire('msgs/adapters/nodeStream');\nrequire('msgs/channels/pubsub');\n\nbus = require('msgs').bus();\nwebSocketServer = ...;\n\nbus.pubsubChannel('broadcast');\nwebSocketServer.on('connection', function (connection) {\n  bus.nodeStreamGateway(connection, { output: 'broadcast', input: 'broadcast' });\n});\n\n```\n\nHere we're using a publish-subscribe channel to broadcast all messages received from a web socket to every connected web socket.  The `broadcast` channel serves as a medium to receive and dispatch messages. For each new web socket connection that is established, the nodeStreamGateway reads messages sent to the server, and then writes messages back to the client.\n\nThis works as long as there is only ever a single application instance, but what if we need to scale horizontally?  In that case, we just need to fold in a inter-process messaging solution, Redis in this case.\n\n```javascript\nvar bus, webSocketServer, redis;\n\nrequire('msgs/adapters/nodeStream');\nrequire('msgs/adapters/redis');\nrequire('msgs/channels/pubsub');\n\nbus = require('msgs').bus();\nredis = require('redis');\nwebSocketServer = ...;\n\nbus.pubsubChannel('fromClient');\nbus.pubsubChannel('toClient');\nwebSocketServer.on('connection', function (connection) {\n  bus.nodeStreamGateway(connection, { output: 'fromClient', input: 'toClient' });\n});\nbus.redisGateway(redis.createClient, 'redisTopic', { output: 'toClient', input: 'fromClient' });\n```\n\nWe took the previous example, altering the nodeStreamGateway to use different channels for sending and receiving messages. The redisGateway bridges these channels while broadcasting messages to every other instance connected to Redis.\n\nOnce your application is using messaging, it's rather trivial to extend it into new environments.\n\n\nSupported Environments\n----------------------\n\nOur goal is to work in every major JavaScript environment; Node.js and major browsers are actively tested and supported.\n\nIf your preferred environment is not supported, please let us know. Some features may not be available in all environments.\n\nTested environments:\n- Node.js (0.6, 0.8)\n- Chrome (stable)\n- Firefox (stable, ESR, should work in earlier versions)\n- IE (6-10)\n- Safari (5, 6, iOS 4-6, should work in earlier versions)\n- Opera (11, 12, should work in earlier versions)\n\nSpecific browser test are provided by [Travis CI](https://travis-ci.org/cujojs/msgs) and [Sauce Labs' Open Sauce Plan](https://saucelabs.com/opensource). You can see [specific browser test results](https://saucelabs.com/u/cujojs-msgs), although odds are they do not reference this specific release/branch/commit.\n\n\nGetting Started\n---------------\n\nmsgs.js can be installed via [npm](https://npmjs.org/), [Bower](http://twitter.github.com/bower/), or from source.\n\nTo install without source:\n\n    $ npm install msgs\n\nor\n\n    $ bower install msgs\n\nFrom source:\n\n    $ npm install\n\nmsgs.js is designed to run in a browser environment, utilizing [AMD modules](https://github.com/amdjs/amdjs-api/wiki/AMD), or within [Node.js](http://nodejs.org/).  [curl](https://github.com/cujojs/curl) is highly recommended as an AMD loader, although any loader should work.\n\nAn ECMAScript 5 compatible environment is assumed.  Older browsers, ::cough:: IE, that do not support ES5 natively can be shimmed.  Any shim should work, although we've tested against cujo's [poly](https://github.com/cujojs/poly)\n\n\nRunning the Tests\n-----------------\n\nThe test suite can be run in two different modes: in node, or in a browser.  We use [npm](https://npmjs.org/) and [Buster.JS](http://busterjs.org/) as the test driver, buster is installed automatically with other dependencies.\n\nBefore running the test suite for the first time:\n\n    $ npm install\n\nTo run the suite in node:\n\n    $ npm test\n\nTo run the suite in a browser:\n\n    $ npm start\n    browse to http://localhost:8282/ in the browser(s) you wish to test.  It can take a few seconds to start.\n\n\nGet in Touch\n------------\n\nYou can find us on the [cujojs mailing list](https://groups.google.com/forum/#!forum/cujojs), or the #cujojs IRC channel on freenode.\n\nPlease report issues on [GitHub](https://github.com/cujojs/msgs/issues).  Include a brief description of the error, information about the runtime (including shims) and any error messages.\n\nFeature requests are also welcome.\n\n\nContributors\n------------\n\n- Scott Andrews <andrewss@vmware.com>\n- Mark Fisher <markfisher@vmware.com>\n\nPlease see CONTRIBUTING.md for details on how to contribute to this project.\n\n\nCopyright\n---------\n\nCopyright 2012-2013 the original author or authors\n\nmsgs.js is made available under the MIT license.  See LICENSE.txt for details.\n\n\n\nChange Log\n----------\n\n0.3.2\n- renamed project to 'msgs' from 'integration'\n- migrate to 'cujojs' organization from 's2js'\n- don't unsubcribe from input channel on redis connection end, the client will buffer commands and auto-reconnect\n\n0.3.1\n- bug fix, filters now work inside a chain\n- easily `forward` messages from one channel to another\n- Bower installable, with dependencies\n- mutli-browser testing with Sauce Labs\n\n0.3.0\n- first release, everything is new\n",
  "readmeFilename": "README.md",
  "_id": "msgs@0.3.2",
  "description": "msgs.js =======",
  "repository": {
    "type": "local",
    "path": "msgs"
  }
}